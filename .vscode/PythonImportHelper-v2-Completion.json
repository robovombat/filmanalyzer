[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "log.logger",
        "description": "log.logger",
        "isExtraImport": true,
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "log.logger",
        "description": "log.logger",
        "isExtraImport": true,
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "log.logger",
        "description": "log.logger",
        "isExtraImport": true,
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "log.logger",
        "description": "log.logger",
        "isExtraImport": true,
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "read_last_lines",
        "importPath": "log.viewer",
        "description": "log.viewer",
        "isExtraImport": true,
        "detail": "log.viewer",
        "documentation": {}
    },
    {
        "label": "read_last_lines",
        "importPath": "log.viewer",
        "description": "log.viewer",
        "isExtraImport": true,
        "detail": "log.viewer",
        "documentation": {}
    },
    {
        "label": "curses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "curses",
        "description": "curses",
        "detail": "curses",
        "documentation": {}
    },
    {
        "label": "save_config",
        "importPath": "settings.loader",
        "description": "settings.loader",
        "isExtraImport": true,
        "detail": "settings.loader",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "settings.loader",
        "description": "settings.loader",
        "isExtraImport": true,
        "detail": "settings.loader",
        "documentation": {}
    },
    {
        "label": "TuiController",
        "importPath": "tui.controller",
        "description": "tui.controller",
        "isExtraImport": true,
        "detail": "tui.controller",
        "documentation": {}
    },
    {
        "label": "LOG_DIR",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "LOG_DIR = \"logs\"\nLOG_FILE = os.path.join(LOG_DIR, \"app.log\")\nos.makedirs(LOG_DIR, exist_ok=True)\nFORMAT = \"[%(levelname).1s] %(message)s\"\nDATEFMT = \"%Y-%m-%d %H:%M:%S\"\nconsole = Console()\nlogger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "LOG_FILE = os.path.join(LOG_DIR, \"app.log\")\nos.makedirs(LOG_DIR, exist_ok=True)\nFORMAT = \"[%(levelname).1s] %(message)s\"\nDATEFMT = \"%Y-%m-%d %H:%M:%S\"\nconsole = Console()\nlogger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "FORMAT = \"[%(levelname).1s] %(message)s\"\nDATEFMT = \"%Y-%m-%d %H:%M:%S\"\nconsole = Console()\nlogger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)\nrich_handler.setFormatter(logging.Formatter(FORMAT, datefmt=DATEFMT))\nlogger.addHandler(rich_handler)",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "DATEFMT",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "DATEFMT = \"%Y-%m-%d %H:%M:%S\"\nconsole = Console()\nlogger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)\nrich_handler.setFormatter(logging.Formatter(FORMAT, datefmt=DATEFMT))\nlogger.addHandler(rich_handler)\nfile_handler = logging.FileHandler(LOG_FILE)",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "console = Console()\nlogger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)\nrich_handler.setFormatter(logging.Formatter(FORMAT, datefmt=DATEFMT))\nlogger.addHandler(rich_handler)\nfile_handler = logging.FileHandler(LOG_FILE)\nfile_handler.setLevel(logging.DEBUG)",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "logger = logging.getLogger(\"FilmAnalyzer\")\nlogger.setLevel(logging.DEBUG)\nlogger.handlers.clear()\nrich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)\nrich_handler.setFormatter(logging.Formatter(FORMAT, datefmt=DATEFMT))\nlogger.addHandler(rich_handler)\nfile_handler = logging.FileHandler(LOG_FILE)\nfile_handler.setLevel(logging.DEBUG)\nfile_handler.setFormatter(logging.Formatter(\"%(asctime)s [%(levelname)s] %(message)s\", datefmt=DATEFMT))",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "rich_handler",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "rich_handler = RichHandler(console=console, markup=True)\nrich_handler.setLevel(logging.INFO)\nrich_handler.setFormatter(logging.Formatter(FORMAT, datefmt=DATEFMT))\nlogger.addHandler(rich_handler)\nfile_handler = logging.FileHandler(LOG_FILE)\nfile_handler.setLevel(logging.DEBUG)\nfile_handler.setFormatter(logging.Formatter(\"%(asctime)s [%(levelname)s] %(message)s\", datefmt=DATEFMT))\nlogger.addHandler(file_handler)\nlog = logger",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "file_handler",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "file_handler = logging.FileHandler(LOG_FILE)\nfile_handler.setLevel(logging.DEBUG)\nfile_handler.setFormatter(logging.Formatter(\"%(asctime)s [%(levelname)s] %(message)s\", datefmt=DATEFMT))\nlogger.addHandler(file_handler)\nlog = logger",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "log.logger",
        "description": "log.logger",
        "peekOfCode": "log = logger",
        "detail": "log.logger",
        "documentation": {}
    },
    {
        "label": "read_last_lines",
        "kind": 2,
        "importPath": "log.viewer",
        "description": "log.viewer",
        "peekOfCode": "def read_last_lines(filepath, num_lines=10):\n    if not os.path.exists(filepath):\n        return [\"[LOG] File not found.\"]\n    with open(filepath, \"r\", encoding=\"utf-8\", errors=\"ignore\") as file:\n        lines = file.readlines()\n        return lines[-num_lines:] if lines else [\"[LOG] No entries found.\"]",
        "detail": "log.viewer",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "settings.loader",
        "description": "settings.loader",
        "peekOfCode": "def load_config():\n    if not os.path.exists(CONFIG_PATH):\n        return {\"terminal_input_mode\": \"hybrid\"}\n    with open(CONFIG_PATH, \"r\", encoding=\"utf-8\") as f:\n        return yaml.safe_load(f)\ndef save_config(new_data):\n    with open(CONFIG_PATH, \"w\", encoding=\"utf-8\") as f:\n        yaml.dump(new_data, f)",
        "detail": "settings.loader",
        "documentation": {}
    },
    {
        "label": "save_config",
        "kind": 2,
        "importPath": "settings.loader",
        "description": "settings.loader",
        "peekOfCode": "def save_config(new_data):\n    with open(CONFIG_PATH, \"w\", encoding=\"utf-8\") as f:\n        yaml.dump(new_data, f)",
        "detail": "settings.loader",
        "documentation": {}
    },
    {
        "label": "CONFIG_PATH",
        "kind": 5,
        "importPath": "settings.loader",
        "description": "settings.loader",
        "peekOfCode": "CONFIG_PATH = os.path.join(\"config\", \"config.yaml\")\ndef load_config():\n    if not os.path.exists(CONFIG_PATH):\n        return {\"terminal_input_mode\": \"hybrid\"}\n    with open(CONFIG_PATH, \"r\", encoding=\"utf-8\") as f:\n        return yaml.safe_load(f)\ndef save_config(new_data):\n    with open(CONFIG_PATH, \"w\", encoding=\"utf-8\") as f:\n        yaml.dump(new_data, f)",
        "detail": "settings.loader",
        "documentation": {}
    },
    {
        "label": "test_logging_system",
        "kind": 2,
        "importPath": "tests.test_logger",
        "description": "tests.test_logger",
        "peekOfCode": "def test_logging_system():\n    log.info(\"🧪 TEST: This is an INFO message\")\n    log.debug(\"🧪 TEST: This is a DEBUG message (file only)\")\n    log.warning(\"🧪 TEST: This is a WARNING\")\n    log.error(\"🧪 TEST: This is an ERROR\")\nif __name__ == \"__main__\":\n    test_logging_system()\n    print(\"\\n✅ Log test complete. Check logs/app.log\")",
        "detail": "tests.test_logger",
        "documentation": {}
    },
    {
        "label": "test_log_reading",
        "kind": 2,
        "importPath": "tests.test_log_viewer",
        "description": "tests.test_log_viewer",
        "peekOfCode": "def test_log_reading():\n    path = \"logs/app.log\"\n    if not os.path.exists(path):\n        print(\"[WARN] Log file doesn't exist.\")\n        return\n    lines = read_last_lines(path, 5)\n    print(\"Last 5 log lines:\")\n    for line in lines:\n        print(\"  \" + line.strip())\nif __name__ == \"__main__\":",
        "detail": "tests.test_log_viewer",
        "documentation": {}
    },
    {
        "label": "test_terminal_rich_output",
        "kind": 2,
        "importPath": "tests.test_terminal_sim",
        "description": "tests.test_terminal_sim",
        "peekOfCode": "def test_terminal_rich_output():\n    log.info(\"[green][OK][/green] Test passed\")\n    log.info(\"[red][error][/red] Something went wrong\")\n    log.info(\"[cyan][info][/cyan] Info is flowing\")\n    log.info(\"[magenta][?][/magenta] What is this?\")\n    print(\"✅ Log messages emitted to terminal and log file\")\nif __name__ == \"__main__\":\n    test_terminal_rich_output()",
        "detail": "tests.test_terminal_sim",
        "documentation": {}
    },
    {
        "label": "TuiController",
        "kind": 6,
        "importPath": "tui.controller",
        "description": "tui.controller",
        "peekOfCode": "class TuiController:\n    def __init__(self, stdscr, config):\n        self.stdscr = stdscr\n        self.tabs = [\"Terminal\", \"Log\", \"Commands\", \"Statistics\", \"Tasks\", \"Settings ⚙\"]\n        self.active_tab = 0\n        self.log_path = os.path.join(\"logs\", \"app.log\")\n        self.config = config\n        self.input_mode = config.get(\"terminal_input_mode\", \"hybrid\")\n        self.is_in_insert_mode = self.input_mode == \"hybrid\"\n        self.input_buffer = \"\"",
        "detail": "tui.controller",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main(stdscr):\n    config = load_config()\n    log.info(\"[SETTINGS] Loaded from config/config.yaml\")\n    log.info(f\"[SETTINGS] input_mode = {config.get('terminal_input_mode')}\")\n    controller = TuiController(stdscr, config)\n    controller.run()\n    log.info(\"✅ App Exited Successfully\")\nif __name__ == \"__main__\":\n    curses.wrapper(main)",
        "detail": "main",
        "documentation": {}
    }
]